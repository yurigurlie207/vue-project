{
  "version": 3,
  "sources": ["../../@sanity/image-url/src/parseAssetId.ts", "../../@sanity/image-url/src/parseSource.ts", "../../@sanity/image-url/src/urlForImage.ts", "../../@sanity/image-url/src/builder.ts"],
  "sourcesContent": ["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n", "import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = {...source}\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n", "import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = (spec.baseUrl || 'https://cdn.sanity.io').replace(/\\/+$/, '')\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n", "import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  SanityModernClientLike,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityModernClientLike(\n  client?: SanityClientLike | SanityProjectDetails | SanityModernClientLike\n): client is SanityModernClientLike {\n  return client && 'config' in client ? typeof client.config === 'function' : false\n}\n\nfunction isSanityClientLike(\n  client?: SanityClientLike | SanityProjectDetails | SanityModernClientLike\n): client is SanityClientLike {\n  return client && 'clientConfig' in client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(\n  options?: SanityClientLike | SanityProjectDetails | SanityModernClientLike\n) {\n  // Did we get a modernish client?\n  if (isSanityModernClientLike(options)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = options.config()\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"],
  "mappings": "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",
  "names": ["example", "parseAssetId", "ref", "split", "id", "dimensionString", "format", "Error", "imgWidthStr", "imgHeightStr", "width", "height", "isValidAssetId", "isFinite", "isRef", "src", "source", "_ref", "isAsset", "_id", "isAssetStub", "asset", "url", "parseSource", "image", "isUrl", "urlToId", "img", "crop", "hotspot", "applyDefaults", "test", "parts", "slice", "replace", "result", "left", "top", "bottom", "right", "x", "y", "SPEC_NAME_TO_URL_NAME_MAPPINGS", "urlForImage", "options", "spec", "JSON", "stringify", "cropLeft", "Math", "round", "cropTop", "hotSpotVerticalRadius", "hotSpotHorizontalRadius", "hotSpotCenterX", "hotSpotCenterY", "rect", "focalPoint", "ignoreImageParams", "fit", "specToImageUrl", "cdnUrl", "baseUrl", "filename", "projectId", "dataset", "params", "isEffectiveCrop", "push", "bg", "flip", "flipHorizontal", "flipVertical", "filter", "Boolean", "join", "forEach", "mapping", "specName", "param", "encodeURIComponent", "length", "cropRect", "imgWidth", "imgHeight", "desiredAspectRatio", "cropAspectRatio", "max", "hotspotXCenter", "hotspotYCenter", "validFits", "validCrops", "validAutoModes", "isSanityModernClientLike", "client", "config", "isSanityClientLike", "clientConfig", "rewriteSpecName", "key", "specs", "entry", "urlBuilder", "apiUrl", "apiHost", "ImageUrlBuilder", "parent", "withOptions", "newOptions", "hasOwnProperty", "specKey", "dpr", "maxWidth", "minWidth", "maxHeight", "minHeight", "size", "blur", "sharpen", "invert", "orientation", "quality", "forceDownload", "download", "value", "indexOf", "saturation", "auto", "pad", "toString"]
}
