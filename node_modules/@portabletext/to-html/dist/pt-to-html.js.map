{"version":3,"file":"pt-to-html.js","sources":["../src/escape.ts","../src/components/marks.ts","../src/components/list.ts","../src/warnings.ts","../src/components/unknown.ts","../src/components/defaults.ts","../src/components/merge.ts","../src/to-html.ts"],"sourcesContent":["const allowedProtocols = ['http', 'https', 'mailto', 'tel']\nconst charMap: Record<string, string> = {\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt',\n  '\"': 'quot',\n  \"'\": '#x27',\n}\n\nexport function escapeHTML(str: string): string {\n  return str.replace(/[&<>\"']/g, (s) => `&${charMap[s]};`)\n}\n\nexport function uriLooksSafe(uri: string): boolean {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  // Allow hash-links, absolute paths and \"same-protocol\" (//foo.bar) URLs\n  if (first === '#' || first === '/') {\n    return true\n  }\n\n  // If the URL does not contain a `:`, allow it\n  const colonIndex = url.indexOf(':')\n  if (colonIndex === -1) {\n    return true\n  }\n\n  // If the protocol is in the allowed list, treat it as OK\n  const proto = url.slice(0, colonIndex).toLowerCase()\n  if (allowedProtocols.indexOf(proto) !== -1) {\n    return true\n  }\n\n  // If the URL is `site/search?query=author:espen`, allow it\n  const queryIndex = url.indexOf('?')\n  if (queryIndex !== -1 && colonIndex > queryIndex) {\n    return true\n  }\n\n  // If the URL is `site/search#my:encoded:data`, allow it\n  const hashIndex = url.indexOf('#')\n  if (hashIndex !== -1 && colonIndex > hashIndex) {\n    return true\n  }\n\n  return false\n}\n","import type {PortableTextMarkComponent} from '../types'\nimport type {TypedObject} from '@portabletext/types'\nimport {escapeHTML, uriLooksSafe} from '../escape'\n\ninterface DefaultLink extends TypedObject {\n  _type: 'link'\n  href: string\n}\n\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => {\n  const href = value?.href || ''\n  const looksSafe = uriLooksSafe(href)\n  return looksSafe ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children\n}\n\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\n  em: ({children}) => `<em>${children}</em>`,\n  strong: ({children}) => `<strong>${children}</strong>`,\n  code: ({children}) => `<code>${children}</code>`,\n  underline: ({children}) => `<span style=\"text-decoration:underline\">${children}</span>`,\n  'strike-through': ({children}) => `<del>${children}</del>`,\n  link,\n}\n","import type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\n\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\n  number: ({children}) => `<ol>${children}</ol>`,\n  bullet: ({children}) => `<ul>${children}</ul>`,\n}\n\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => `<li>${children}</li>`\n","const getTemplate = (type: string, prop: string): string =>\n  `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`\n\nexport const unknownTypeWarning = (typeName: string): string =>\n  getTemplate(`block type \"${typeName}\"`, 'types')\n\nexport const unknownMarkWarning = (markType: string): string =>\n  getTemplate(`mark type \"${markType}\"`, 'marks')\n\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\n\nexport const unknownListStyleWarning = (listStyle: string): string =>\n  getTemplate(`list style \"${listStyle}\"`, 'list')\n\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\n\nexport function printWarning(message: string): void {\n  console.warn(message)\n}\n","import type {PortableTextHtmlComponents} from '../types'\nimport {unknownTypeWarning} from '../warnings'\n\nexport const DefaultUnknownType: PortableTextHtmlComponents['unknownType'] = ({\n  value,\n  isInline,\n}) => {\n  const warning = unknownTypeWarning(value._type)\n  return isInline\n    ? `<span style=\"display:none\">${warning}</span>`\n    : `<div style=\"display:none\">${warning}</div>`\n}\n\nexport const DefaultUnknownMark: PortableTextHtmlComponents['unknownMark'] = ({\n  markType,\n  children,\n}) => {\n  return `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`\n}\n\nexport const DefaultUnknownBlockStyle: PortableTextHtmlComponents['unknownBlockStyle'] = ({\n  children,\n}) => {\n  return `<p>${children}</p>`\n}\n\nexport const DefaultUnknownList: PortableTextHtmlComponents['unknownList'] = ({children}) => {\n  return `<ul>${children}</ul>`\n}\n\nexport const DefaultUnknownListItem: PortableTextHtmlComponents['unknownListItem'] = ({\n  children,\n}) => {\n  return `<li>${children}</li>`\n}\n","import type {PortableTextBlockComponent, PortableTextHtmlComponents} from '../types'\nimport type {PortableTextBlockStyle} from '@portabletext/types'\nimport {defaultMarks} from './marks'\nimport {defaultLists, DefaultListItem} from './list'\nimport {\n  DefaultUnknownType,\n  DefaultUnknownMark,\n  DefaultUnknownList,\n  DefaultUnknownListItem,\n  DefaultUnknownBlockStyle,\n} from './unknown'\n\nexport const DefaultHardBreak = (): string => '<br/>'\n\nexport const defaultPortableTextBlockStyles: Record<\n  PortableTextBlockStyle,\n  PortableTextBlockComponent | undefined\n> = {\n  normal: ({children}) => `<p>${children}</p>`,\n  blockquote: ({children}) => `<blockquote>${children}</blockquote>`,\n  h1: ({children}) => `<h1>${children}</h1>`,\n  h2: ({children}) => `<h2>${children}</h2>`,\n  h3: ({children}) => `<h3>${children}</h3>`,\n  h4: ({children}) => `<h4>${children}</h4>`,\n  h5: ({children}) => `<h5>${children}</h5>`,\n  h6: ({children}) => `<h6>${children}</h6>`,\n}\n\nexport const defaultComponents: PortableTextHtmlComponents = {\n  types: {},\n\n  block: defaultPortableTextBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle,\n}\n","import type {PortableTextHtmlComponents, PortableTextComponents} from '../types'\n\nexport function mergeComponents(\n  parent: PortableTextHtmlComponents,\n  overrides: PortableTextComponents,\n): PortableTextHtmlComponents {\n  const {block, list, listItem, marks, types, ...rest} = overrides\n  // @todo figure out how to not `as ...` these\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextHtmlComponents['block'],\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextHtmlComponents['list'],\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextHtmlComponents['listItem'],\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextHtmlComponents['marks'],\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextHtmlComponents['types'],\n    ...rest,\n  }\n}\n\nfunction mergeDeeply(\n  parent: PortableTextHtmlComponents,\n  overrides: PortableTextComponents,\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types',\n): PortableTextHtmlComponents[typeof key] {\n  const override = overrides[key]\n  const parentVal = parent[key]\n\n  if (typeof override === 'function') {\n    return override\n  }\n\n  if (override && typeof parentVal === 'function') {\n    return override\n  }\n\n  if (override) {\n    return {...parentVal, ...override} as PortableTextHtmlComponents[typeof key]\n  }\n\n  return parentVal\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport type {\n  MissingComponentHandler,\n  NodeRenderer,\n  PortableTextHtmlComponents,\n  PortableTextOptions,\n  HtmlPortableTextList,\n  Serializable,\n  SerializedBlock,\n} from './types'\nimport {\n  buildMarksTree,\n  isPortableTextBlock,\n  isPortableTextListItemBlock,\n  isPortableTextToolkitList,\n  isPortableTextToolkitSpan,\n  isPortableTextToolkitTextNode,\n  nestLists,\n  spanToPlainText,\n  ToolkitNestedPortableTextSpan,\n  ToolkitTextNode,\n} from '@portabletext/toolkit'\nimport {defaultComponents} from './components/defaults'\nimport {mergeComponents} from './components/merge'\nimport {escapeHTML} from './escape'\nimport {\n  printWarning,\n  unknownBlockStyleWarning,\n  unknownListItemStyleWarning,\n  unknownListStyleWarning,\n  unknownMarkWarning,\n  unknownTypeWarning,\n} from './warnings'\n\nexport function toHTML<B extends TypedObject = PortableTextBlock | ArbitraryTypedObject>(\n  value: B | B[],\n  options: PortableTextOptions = {},\n): string {\n  const {\n    components: componentOverrides,\n    onMissingComponent: missingComponentHandler = printWarning,\n  } = options\n\n  const handleMissingComponent = missingComponentHandler || noop\n  const blocks = Array.isArray(value) ? value : [value]\n  const nested = nestLists(blocks, 'html')\n  const components = componentOverrides\n    ? mergeComponents(defaultComponents, componentOverrides)\n    : defaultComponents\n\n  const renderNode = getNodeRenderer(components, handleMissingComponent)\n  const rendered = nested.map((node, index) =>\n    renderNode({node: node, index, isInline: false, renderNode}),\n  )\n\n  return rendered.join('')\n}\n\nconst getNodeRenderer = (\n  components: PortableTextHtmlComponents,\n  handleMissingComponent: MissingComponentHandler,\n): NodeRenderer => {\n  function renderNode<N extends TypedObject>(options: Serializable<N>): string {\n    const {node, index, isInline} = options\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index)\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index)\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node)\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, isInline)\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node)\n    }\n\n    return renderCustomBlock(node, index, isInline)\n  }\n\n  function renderListItem(\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\n    index: number,\n  ): string {\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\n    const renderer = components.listItem\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\n    const itemHandler = handler || components.unknownListItem\n\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: 'listItemStyle',\n      })\n    }\n\n    let children = tree.children\n    if (node.style && node.style !== 'normal') {\n      // Wrap any other style in whatever the block component says to use\n      const {listItem, ...blockNode} = node\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\n    }\n\n    return itemHandler({value: node, index, isInline: false, renderNode, children})\n  }\n\n  function renderList(node: HtmlPortableTextList, index: number): string {\n    const children = node.children.map((child, childIndex) =>\n      renderNode({\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\n        index: index,\n        isInline: false,\n        renderNode,\n      }),\n    )\n\n    const component = components.list\n    const handler = typeof component === 'function' ? component : component[node.listItem]\n    const list = handler || components.unknownList\n\n    if (list === components.unknownList) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\n    }\n\n    return list({value: node, index, isInline: false, renderNode, children: children.join('')})\n  }\n\n  function renderSpan(node: ToolkitNestedPortableTextSpan): string {\n    const {markDef, markType, markKey} = node\n    const span = components.marks[markType] || components.unknownMark\n    const children = node.children.map((child, childIndex) =>\n      renderNode({node: child, index: childIndex, isInline: true, renderNode}),\n    )\n\n    if (span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\n    }\n\n    return span({\n      text: spanToPlainText(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(''),\n    })\n  }\n\n  function renderBlock(node: PortableTextBlock, index: number, isInline: boolean): string {\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\n    const style = props.node.style || 'normal'\n    const handler =\n      typeof components.block === 'function' ? components.block : components.block[style]\n    const block = handler || components.unknownBlockStyle\n\n    if (block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: 'blockStyle',\n        type: style,\n      })\n    }\n\n    return block({...props, value: props.node, renderNode})\n  }\n\n  function renderText(node: ToolkitTextNode): string {\n    if (node.text === '\\n') {\n      const hardBreak = components.hardBreak\n      return hardBreak ? hardBreak() : '\\n'\n    }\n\n    return escapeHTML(node.text)\n  }\n\n  function renderCustomBlock(value: TypedObject, index: number, isInline: boolean): string {\n    const node = components.types[value._type]\n\n    if (!node) {\n      handleMissingComponent(unknownTypeWarning(value._type), {\n        nodeType: 'block',\n        type: value._type,\n      })\n    }\n\n    const component = node || components.unknownType\n    return component({\n      value,\n      isInline,\n      index,\n      renderNode,\n    })\n  }\n\n  return renderNode\n}\n\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\n  const {node, index, isInline, renderNode} = options\n  const tree = buildMarksTree(node)\n  const children = tree.map((child, i) =>\n    renderNode({node: child, isInline: true, index: i, renderNode}),\n  )\n\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(''),\n    index,\n    isInline,\n    node,\n  }\n}\n\nfunction noop() {\n  // Intentional noop\n}\n"],"names":["allowedProtocols","charMap","escapeHTML","str","replace","s","concat","uriLooksSafe","uri","url","trim","first","charAt","colonIndex","indexOf","proto","slice","toLowerCase","queryIndex","hashIndex","link","_ref","children","value","href","looksSafe","defaultMarks","em","_ref2","strong","_ref3","code","_ref4","underline","_ref5","_ref6","defaultLists","number","_ref7","bullet","_ref8","DefaultListItem","_ref9","getTemplate","type","prop","unknownTypeWarning","typeName","unknownMarkWarning","markType","unknownBlockStyleWarning","blockStyle","unknownListStyleWarning","listStyle","unknownListItemStyleWarning","printWarning","message","console","warn","DefaultUnknownType","_ref10","isInline","warning","_type","DefaultUnknownMark","_ref11","DefaultUnknownBlockStyle","_ref12","DefaultUnknownList","_ref13","DefaultUnknownListItem","_ref14","DefaultHardBreak","defaultPortableTextBlockStyles","normal","_ref15","blockquote","_ref16","h1","_ref17","h2","_ref18","h3","_ref19","h4","_ref20","h5","_ref21","h6","_ref22","defaultComponents","types","block","marks","list","listItem","hardBreak","unknownType","unknownMark","unknownList","unknownListItem","unknownBlockStyle","mergeComponents","parent","overrides","rest","_excluded","_objectSpread","mergeDeeply","key","override","parentVal","toHTML","options","arguments","length","undefined","components","componentOverrides","onMissingComponent","missingComponentHandler","handleMissingComponent","noop","blocks","Array","isArray","nested","nestLists","renderNode","getNodeRenderer","rendered","map","node","index","join","isPortableTextToolkitList","renderList","isPortableTextListItemBlock","renderListItem","isPortableTextToolkitSpan","renderSpan","isPortableTextBlock","renderBlock","isPortableTextToolkitTextNode","renderText","renderCustomBlock","tree","serializeBlock","renderer","handler","itemHandler","style","nodeType","blockNode","_objectWithoutProperties","_excluded2","child","childIndex","_key","component","markDef","markKey","span","text","spanToPlainText","_serializeBlock","props","_excluded3","buildMarksTree","i"],"mappings":"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"}